using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Extensions.Polling;
using Telegram.Bot.Requests;
using CheckLiveBot.Services;

namespace CheckLiveBot
{
    internal class Program
    {
        private static ITelegramBotClient? _botClient;
        private static readonly string BotToken = "7403417415:AAFafX4qs1bvmounVPC--ySVzV0WOg7JucY";
        private static DatabaseService? _databaseService;

        static async Task Main(string[] args)
        {
            Console.WriteLine("Starting CheckLiveBot...");

            // Initialize database
            _databaseService = new DatabaseService();
            try
            {
                await _databaseService.InitializeDatabaseAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to initialize database: {ex.Message}");
                return;
            }

            // Initialize the bot client
            _botClient = new TelegramBotClient(BotToken);

            // Test the connection
            try
            {
                var me = await _botClient.GetMeAsync();
                Console.WriteLine($"Bot connected successfully! Bot name: {me.FirstName} (@{me.Username})");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to bot: {ex.Message}");
                return;
            }

            // Set up message handling
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>() // Receive all update types
            };

            // Start receiving updates using CancellationTokenSource
            var cancellationTokenSource = new CancellationTokenSource();
            
            _botClient.StartReceiving(
                updateHandler: HandleUpdateAsync,
                errorHandler: HandlePollingErrorAsync,
                receiverOptions: receiverOptions,
                cancellationToken: cancellationTokenSource.Token
            );

            Console.WriteLine("Bot is running and waiting for messages...");
            Console.WriteLine("Press Ctrl+C to stop the bot");

            // Keep the application running
            Console.CancelKeyPress += (sender, e) =>
            {
                e.Cancel = true;
                cancellationTokenSource.Cancel();
            };

            try
            {
                await Task.Delay(-1, cancellationTokenSource.Token);
            }
            catch (TaskCanceledException)
            {
                Console.WriteLine("Bot stopped.");
            }
            finally
            {
                _databaseService?.Dispose();
            }
        }

        private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            try
            {
                // Handle different types of updates
                if (update.Type == UpdateType.Message && update.Message?.Text is { } messageText)
                {
                    await HandleMessageAsync(botClient, update.Message, cancellationToken);
                }
                else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery is { } callbackQuery)
                {
                    await HandleCallbackQueryAsync(botClient, callbackQuery, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling update: {ex.Message}");
            }
        }

        private static async Task HandleMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id;
            var messageText = message.Text!;
            var user = message.From;

            Console.WriteLine($"Received message: '{messageText}' from {user?.FirstName} ({user?.Username}) in chat {chatId}");

            // Check if user is active (has valid subscription)
            if (!await IsUserAuthorizedAsync(user?.Id ?? 0, user?.Username, user?.FirstName, user?.LastName))
            {
                await SendUnauthorizedMessageAsync(botClient, chatId, cancellationToken);
                return;
            }

            // Handle /start command
            if (messageText.StartsWith("/start"))
            {
                await SendWelcomeMenuAsync(botClient, chatId, user?.FirstName ?? "User", cancellationToken);
            }
            // Handle /stats command
            else if (messageText.StartsWith("/stats"))
            {
                await SendUserStatsAsync(botClient, chatId, user?.Id ?? 0, cancellationToken);
            }
            // Handle /history command  
            else if (messageText.StartsWith("/history"))
            {
                await SendUserHistoryAsync(botClient, chatId, user?.Id ?? 0, cancellationToken);
            }
            // Handle Facebook ID input
            else if (IsValidFacebookId(messageText))
            {
                await CheckFacebookIdAsync(botClient, chatId, messageText, user?.Id ?? 0, cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "❌ Invalid Facebook ID format. Please enter a valid Facebook ID or use /start to see the menu.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task<bool> IsUserAuthorizedAsync(long telegramUserId, string? username, string? firstName, string? lastName)
        {
            if (_databaseService == null || telegramUserId == 0) return false;

            // Create or update user in database
            await _databaseService.CreateOrUpdateUserAsync(telegramUserId, username, firstName, lastName);

            // Check if user subscription is active
            return await _databaseService.IsUserActiveAsync(telegramUserId);
        }

        private static async Task SendUnauthorizedMessageAsync(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var text = "🚫 **Access Expired**\n\n" +
                      "Your subscription has expired. Please contact the administrator to extend your access.\n\n" +
                      "📞 Contact: @admin_username";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: text,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken);
        }

        private static async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message!.Chat.Id;
            var callbackData = callbackQuery.Data;

            // Answer the callback query to remove loading state
            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);

            switch (callbackData)
            {
                case "check_single":
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "📝 Please enter the Facebook ID you want to check:\n\nExample: 100012345678901",
                        cancellationToken: cancellationToken);
                    break;

                case "check_bulk":
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "📋 Please send Facebook IDs separated by new lines:\n\nExample:\n100012345678901\n100012345678902\n100012345678903",
                        cancellationToken: cancellationToken);
                    break;

                case "help":
                    await SendHelpMessageAsync(botClient, chatId, cancellationToken);
                    break;

                case "stats":
                    await SendUserStatsAsync(botClient, chatId, callbackQuery.From.Id, cancellationToken);
                    break;

                case "history":
                    await SendUserHistoryAsync(botClient, chatId, callbackQuery.From.Id, cancellationToken);
                    break;

                case "back_to_menu":
                    await SendWelcomeMenuAsync(botClient, chatId, callbackQuery.From.FirstName ?? "User", cancellationToken);
                    break;
            }
        }

        private static async Task SendWelcomeMenuAsync(ITelegramBotClient botClient, long chatId, string userName, CancellationToken cancellationToken)
        {
            var welcomeText = $"🎯 **Welcome to Facebook ID Checker Bot, {userName}!**\n\n" +
                             "This bot helps you check if Facebook IDs are live (active) or not.\n\n" +
                             "📱 **Features:**\n" +
                             "• Check single Facebook ID\n" +
                             "• Bulk check multiple IDs\n" +
                             "• View your statistics\n" +
                             "• Check your history\n\n" +
                             "Choose an option below to get started:";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("🔍 Check Single ID", "check_single"),
                    InlineKeyboardButton.WithCallbackData("📋 Check Multiple IDs", "check_bulk"),
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("📊 My Statistics", "stats"),
                    InlineKeyboardButton.WithCallbackData("📜 My History", "history"),
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("❓ Help", "help"),
                }
            });

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: welcomeText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }

        private static async Task SendHelpMessageAsync(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var helpText = "📖 **Help - How to use Facebook ID Checker Bot**\n\n" +
                          "🔍 **Single ID Check:**\n" +
                          "• Click 'Check Single ID'\n" +
                          "• Enter a Facebook ID (numbers only)\n" +
                          "• Get instant results\n\n" +
                          "📋 **Bulk ID Check:**\n" +
                          "• Click 'Check Multiple IDs'\n" +
                          "• Send multiple IDs (one per line)\n" +
                          "• Get results for all IDs\n\n" +
                          "📊 **Statistics:**\n" +
                          "• View your checking statistics\n" +
                          "• See total checks and success rates\n\n" +
                          "📜 **History:**\n" +
                          "• View your recent checks\n" +
                          "• See previous results\n\n" +
                          "✅ **Valid Facebook ID formats:**\n" +
                          "• 100012345678901\n" +
                          "• 61558123456789\n\n" +
                          "❌ **Invalid formats:**\n" +
                          "• facebook.com/username\n" +
                          "• @username\n" +
                          "• Short IDs (less than 10 digits)\n\n" +
                          "💡 **Commands:**\n" +
                          "• /start - Show main menu\n" +
                          "• /stats - Show your statistics\n" +
                          "• /history - Show your check history";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("🔙 Back to Menu", "back_to_menu"),
                }
            });

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: helpText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }

        private static async Task SendUserStatsAsync(ITelegramBotClient botClient, long chatId, long telegramUserId, CancellationToken cancellationToken)
        {
            if (_databaseService == null) return;

            var stats = await _databaseService.GetUserStatisticsAsync(telegramUserId);
            var user = await _databaseService.GetUserByTelegramIdAsync(telegramUserId);

            var expiryInfo = user != null ? 
                $"📅 **Expires:** {user.ExpiryDate:yyyy-MM-dd HH:mm} UTC\n" +
                $"⏰ **Days Left:** {Math.Max(0, (user.ExpiryDate - DateTime.UtcNow).Days)} days\n\n" : "";

            var statsText = $"📊 **Your Statistics**\n\n" +
                           expiryInfo +
                           $"🔢 **Total Checks:** {stats.GetValueOrDefault("TotalChecks", 0)}\n" +
                           $"✅ **Live IDs Found:** {stats.GetValueOrDefault("LiveIds", 0)}\n" +
                           $"❌ **Dead IDs Found:** {stats.GetValueOrDefault("DeadIds", 0)}\n" +
                           $"📅 **Today's Checks:** {stats.GetValueOrDefault("TodayChecks", 0)}\n\n";

            if (stats.GetValueOrDefault("TotalChecks", 0) > 0)
            {
                var successRate = (double)stats.GetValueOrDefault("LiveIds", 0) / stats.GetValueOrDefault("TotalChecks", 1) * 100;
                statsText += $"📈 **Success Rate:** {successRate:F1}%";
            }

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("🔙 Back to Menu", "back_to_menu"),
                }
            });

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: statsText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }

        private static async Task SendUserHistoryAsync(ITelegramBotClient botClient, long chatId, long telegramUserId, CancellationToken cancellationToken)
        {
            if (_databaseService == null) return;

            var history = await _databaseService.GetUserFacebookChecksAsync(telegramUserId, 10);

            var historyText = "📜 **Your Recent Checks** (Last 10)\n\n";

            if (history.Count == 0)
            {
                historyText += "No checks found. Start checking Facebook IDs to see your history here!";
            }
            else
            {
                foreach (var check in history)
                {
                    var status = check.IsLive ? "✅ LIVE" : "❌ DEAD";
                    var date = check.CheckedAt.ToString("MM/dd HH:mm");
                    historyText += $"🆔 `{check.FacebookId}` - {status} - {date}\n";
                }
            }

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("🔙 Back to Menu", "back_to_menu"),
                }
            });

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: historyText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }

        private static async Task CheckFacebookIdAsync(ITelegramBotClient botClient, long chatId, string facebookIds, long telegramUserId, CancellationToken cancellationToken)
        {
            // Send "checking" message
            var checkingMessage = await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "🔍 Checking Facebook ID(s)...",
                cancellationToken: cancellationToken);

            // Split IDs if multiple
            var ids = facebookIds.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                                 .Select(id => id.Trim())
                                 .Where(id => IsValidFacebookId(id))
                                 .ToList();

            if (ids.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: chatId,
                    messageId: checkingMessage.MessageId,
                    text: "❌ No valid Facebook IDs found. Please check your input format.",
                    cancellationToken: cancellationToken);
                return;
            }

            var results = new List<string>();

            foreach (var id in ids)
            {
                // Simulate checking Facebook ID (replace with actual checking logic)
                await Task.Delay(1000, cancellationToken); // Simulate API call delay
                
                var isLive = await SimulateCheckFacebookId(id);
                var status = isLive ? "✅ LIVE" : "❌ DEAD";
                var profileUrl = $"https://facebook.com/{id}";
                
                // Save to database
                if (_databaseService != null)
                {
                    try
                    {
                        await _databaseService.SaveFacebookIdCheckAsync(telegramUserId, id, isLive);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error saving Facebook check to database: {ex.Message}");
                    }
                }
                
                results.Add($"🆔 `{id}`\n📊 Status: {status}\n🔗 [Profile]({profileUrl})");
            }

            var resultText = $"📋 **Facebook ID Check Results:**\n\n{string.Join("\n\n", results)}\n\n" +
                           $"✅ Live: {results.Count(r => r.Contains("✅ LIVE"))}\n" +
                           $"❌ Dead: {results.Count(r => r.Contains("❌ DEAD"))}\n" +
                           $"📊 Total: {results.Count}";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("🔙 Back to Menu", "back_to_menu"),
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: checkingMessage.MessageId,
                text: resultText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }

        private static bool IsValidFacebookId(string input)
        {
            // Check if input contains only digits and is between 10-20 characters
            return input.All(char.IsDigit) && input.Length >= 10 && input.Length <= 20;
        }

        private static async Task<bool> SimulateCheckFacebookId(string facebookId)
        {
            // TODO: Replace this with actual Facebook API checking logic
            // This is just a simulation - randomly returns true/false
            await Task.Delay(500); // Simulate network delay
            
            // For demo purposes, IDs ending with even numbers are "live"
            return int.Parse(facebookId.Last().ToString()) % 2 == 0;
        }

        private static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine($"Polling error: {exception.Message}");
            return Task.CompletedTask;
        }
    }
}